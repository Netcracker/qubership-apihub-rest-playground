import { IHttpOperation, INodeExample, INodeExternalExample } from '@stoplight/types'
import React, { useMemo, useState } from 'react'
import { exceedsSize } from '../../../utils/exampleGeneration/exampleGeneration'
import { Box } from '@mui/material'
import { LoadMore } from '../../LoadMore'
import { ExamplesDropdown } from '../ExamplesDropdown'
import { GenerateButton } from '../GenerateButton'
import { ResponseCodes } from './ResponseCodes'
import { useTextRequestResponseBodyState } from '../../../hooks/useTextRequestBodyState'
import { ExampleDescription } from '../ExampleDescription'
import { ExampleViewer } from '../ExampleViewer'
import { safeStringify } from '@stoplight/json'
import { isEmpty } from 'lodash'
import { ANY_CONTENT_TYPE, getResponseType, JSON_CONTENT_TYPE } from '../../../utils/response'

export interface ResponseExamplesProps {
  httpOperation: IHttpOperation;
}

const ALLOWED_CONTENT_TYPES = [JSON_CONTENT_TYPE, ANY_CONTENT_TYPE]

export const ResponseExamples = ({ httpOperation }: ResponseExamplesProps) => {
  const [show, setShow] = React.useState<boolean>(false)
  const [loading, setLoading] = React.useState<boolean>(false)
  const responses = httpOperation.responses
  const firstCode = responses?.[0].code
  const [responseStatusCode, setResponseStatusCode] = useState<string | undefined>(firstCode)

  const [currentExample, setCurrentExample] = useState<INodeExample | INodeExternalExample | undefined>()
  const description = currentExample ? (currentExample as INodeExample)?.description : ''

  const response = useMemo(
    () => responses.find(response => response.code === responseStatusCode),
    [responses, responseStatusCode],
  )

  const mediaTypeContent = useMemo(
    () => response?.contents?.find(content => {
      const mediaType = getResponseType(content.mediaType)
      return mediaType && ALLOWED_CONTENT_TYPES.includes(mediaType)
    }),
    [response],
  )

  const [responseExample, setResponseExample] = useTextRequestResponseBodyState({
    mediaTypeContent: mediaTypeContent,
    skipReadOnly: false,
    skipWriteOnly: true,
  })

  const autogeneratedExample = useMemo(() => {
    return {
      key: 'autogenerated',
      value: safeStringify(responseExample),
    } as INodeExample
  }, [responseExample])

  const allExamples: INodeExample[] = useMemo(() => {
    const examplesFromDocument = mediaTypeContent?.examples ?? []
    if (isEmpty(examplesFromDocument) && responseExample) {
      return [autogeneratedExample] as INodeExample[]
    }
    return examplesFromDocument as INodeExample[]
  }, [autogeneratedExample, mediaTypeContent?.examples, responseExample])

  const handleLoadMore = () => {
    setLoading(true)
    setTimeout(() => setShow(true), 50)
  }

  return (
    <Box
      style={{
        display: 'grid',
        height: '100%',
        gridTemplateRows: 'auto auto minmax(0, 1fr)',
        gridTemplateAreas: `
          'dropdown'
          'description'
          'content'
        `,
      }}
    >
      <Box gridArea="dropdown">
        <ResponseCodes responses={responses} onStatusCodeChange={setResponseStatusCode} statusCode={firstCode}/>
        <Box display="flex" mt={1}>
          <ExamplesDropdown
            key="response-examples"
            examples={allExamples}
            requestResponseBody={responseExample}
            onChange={setResponseExample}
            onSelectExample={setCurrentExample}
          />
          <GenerateButton/>
        </Box>
      </Box>

      <Box gridArea="description">
        <ExampleDescription description={description}/>
      </Box>

      {/*100% - 24px because of height of inner container*/}
      <Box gridArea="content" gridRow="span 2" height="calc(100% - 24px)" mt={3}>
        {show || !exceedsSize(responseExample) ? (
          <Box height="100%">
            <ExampleViewer example={responseExample}/>
          </Box>
        ) : (
          <LoadMore loading={loading} onClick={handleLoadMore}/>
        )}
      </Box>
    </Box>
  )
}
