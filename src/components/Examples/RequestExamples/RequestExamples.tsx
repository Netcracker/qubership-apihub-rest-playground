import * as React from 'react'
import { FC, memo, useMemo, useState } from 'react'
import { IHttpOperation, INodeExample, INodeExternalExample } from '@stoplight/types'
import { Box } from '@mui/material'
import { useTextRequestResponseBodyState } from '../../../hooks/useTextRequestBodyState'
import { ExamplesDropdown } from '../ExamplesDropdown'
import { GenerateButton } from '../GenerateButton'
import { ExampleDescription } from '../ExampleDescription'
import { safeStringify } from '@stoplight/json'
import { isEmpty } from 'lodash'
import { Editor } from '@monaco-editor/react'

export type RequestExamplesProps = {
  httpOperation: IHttpOperation;
};

export const RequestExamples: FC<RequestExamplesProps> = memo<RequestExamplesProps>(({ httpOperation }) => {
  const [currentExample, setCurrentExample] = useState<INodeExample | INodeExternalExample | undefined>()

  const description = currentExample ? ((currentExample as INodeExample)?.value as INodeExample)?.description : ''

  const mediaTypeContent = httpOperation.request?.body?.contents?.[0]
  const [textRequestBody, setTextRequestBody] = useTextRequestResponseBodyState({
    mediaTypeContent: mediaTypeContent,
    skipReadOnly: true,
    skipWriteOnly: false,
  })

  const autogeneratedExample = useMemo(() => {
    return {
      key: 'autogenerated',
      value: safeStringify(textRequestBody),
    } as INodeExample
  }, [textRequestBody])

  const allExamples: INodeExample[] = useMemo(() => {
    const examplesFromDocument = mediaTypeContent?.examples ?? []
    if (isEmpty(examplesFromDocument) && textRequestBody) {
      return [autogeneratedExample] as INodeExample[]
    }
    return examplesFromDocument as INodeExample[]
  }, [textRequestBody])

  return (
    <Box
      style={{
        display: 'grid',
        height: '100%',
        gridTemplateRows: 'auto auto minmax(0, 1fr)',
        gridTemplateAreas: `
          'dropdown'
          'description'
          'content'
        `,
      }}
    >
      <Box display="flex" alignItems="center" gridArea="dropdown">
        <ExamplesDropdown
          examples={allExamples}
          requestResponseBody={textRequestBody}
          onChange={setTextRequestBody}
          onSelectExample={setCurrentExample}
        />
        <GenerateButton/>
      </Box>

      <Box gridArea="description">
        <ExampleDescription description={description}/>
      </Box>

      {/*100% - 24px because of height of inner container*/}
      <Box gridArea="content" gridRow="span 2" height="calc(100% - 24px)" mt={3}>
        <Editor
          height="100%"
          defaultLanguage="json"
          value={textRequestBody}
          options={{
            readOnly: true,
            cursorStyle: 'line',
            wordWrap: true,
            minimap: { enabled: false },
            hideCursorInOverviewRuler: true,
            overviewRulerLanes: 0,
            lineNumbersMinChars: 2,
            alwaysConsumeMouseWheel: false,
            scrollBeyondLastLine: false,
          }}
          onMount={(editor, monaco) => {
            setTimeout(() => {
              editor.getAction('editor.action.formatDocument').run()
            }, 300)
          }}
        />
      </Box>
    </Box>
  )
})
